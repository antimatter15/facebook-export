// Generated by CoffeeScript 1.3.3
var accessToken, beginProcess, displayOutput, finished, getAccessToken, getFriends, loadJSON, processing, queryURL, queue, retrieveInfo, saveCSV, saveFile, saveOutput, shuffle, toBlob, toCSV, __load,
  __slice = [].slice;

queryURL = function() {
  var callback, selectors, url;
  url = arguments[0], callback = arguments[1], selectors = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
  return chrome.tabs.create({
    active: false,
    url: url
  }, function(tab) {
    return chrome.tabs.executeScript(tab.id, {
      file: "injector.js"
    }, function() {
      var port;
      port = chrome.tabs.connect(tab.id);
      port.postMessage(selectors);
      return port.onMessage.addListener(function(msg) {
        callback.apply(null, msg);
        return chrome.tabs.remove(tab.id);
      });
    });
  });
};

loadJSON = function(url, callback) {
  return getAccessToken(function(token) {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open('get', url.replace('@token', token), true);
    xhr.onload = function() {
      return callback(JSON.parse(xhr.responseText));
    };
    return xhr.send(null);
  });
};

Array.prototype.remove = function(e) {
  var t, _ref;
  if ((t = this.indexOf(e)) > -1) {
    return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
  }
};

shuffle = function(list) {
  var i, j, _ref;
  i = list.length;
  while (--i) {
    j = Math.floor(Math.random() * (i + 1));
    _ref = [list[j], list[i]], list[i] = _ref[0], list[j] = _ref[1];
  }
  return list;
};

accessToken = '';

getAccessToken = function(callback) {
  if (accessToken !== '') {
    return callback(accessToken);
  }
  return queryURL('https://developers.facebook.com/docs/reference/api/', function(_arg) {
    var href;
    href = _arg.href;
    accessToken = href.split('?')[1];
    return callback(accessToken);
  }, 'a[href*=friends]');
};

getFriends = function(callback) {
  return loadJSON('https://graph.facebook.com/me/friends?@token', function(_arg) {
    var data;
    data = _arg.data;
    return callback(data);
  });
};

retrieveInfo = function(uid, callback) {
  if (uid in localStorage && localStorage[uid].length > 100) {
    return callback(JSON.parse(localStorage[uid]), true);
  }
  return loadJSON("https://graph.facebook.com/" + uid + "?@token", function(table) {
    console.log(table.username, table);
    return queryURL("https://www.facebook.com/" + table.username + "/info", function(info) {
      var name, value, _i, _len, _ref;
      for (_i = 0, _len = info.length; _i < _len; _i++) {
        _ref = info[_i], name = _ref[0], value = _ref[1];
        if (name !== '') {
          table[name] = value;
        }
      }
      localStorage[uid] = JSON.stringify(table);
      return callback(table);
    }, '@info');
  });
};

queue = [];

processing = [];

finished = [];

beginProcess = function() {
  return getFriends(function(friends) {
    var i, loadNext, _i, _results;
    queue = shuffle(friends);
    loadNext = function() {
      var friend;
      if (queue.length === 0) {
        return;
      }
      friend = queue.shift();
      processing.push(friend.id);
      return retrieveInfo(friend.id, function(table, cached) {
        friend.info = table;
        finished.push(friend);
        processing.remove(friend.id);
        console.log(processing.length, finished.length, queue.length);
        if (cached) {
          return loadNext();
        } else {
          return setTimeout(loadNext, Math.random() * 5000);
        }
      });
    };
    _results = [];
    for (i = _i = 0; _i <= 5; i = ++_i) {
      _results.push(setTimeout(loadNext, Math.random() * 5000));
    }
    return _results;
  });
};

displayOutput = function() {
  var text;
  document.body.innerHTML = '';
  text = document.createElement('textarea');
  text.value = JSON.stringify(finished, null, '\t');
  text.style.width = '100%';
  text.style.height = '100%';
  text.style.top = '0';
  text.style.left = '0';
  text.style.position = 'absolute';
  return document.body.appendChild(text);
};

saveOutput = function() {
  return saveFile('facebook.json', JSON.stringify(finished, null, '\t'));
};

toBlob = function(str) {
  var bb;
  try {
    return new Blob([str]);
  } catch (error) {
    bb = new WebKitBlobBuilder();
    bb.append(str);
    return bb.getBlob();
  }
};

saveFile = function(name, str) {
  var click, link, url;
  url = webkitURL.createObjectURL(toBlob(str));
  click = function(node) {
    var event;
    event = document.createEvent("MouseEvents");
    event.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    return node.dispatchEvent(event);
  };
  link = document.createElement('a');
  link.download = name;
  link.href = url;
  link.target = "_blank";
  return click(link);
};

__load = function() {
  var xhr;
  xhr = new XMLHttpRequest;
  xhr.open('get', '../sensitive.json', true);
  xhr.onload = function() {
    finished = JSON.parse(xhr.responseText);
    return console.log("loaded " + finished.length + " friends");
  };
  return xhr.send(null);
};

saveCSV = function() {
  return saveFile('facebook.csv', toCSV());
};

toCSV = function() {
  var csv, i, info, key, keys, obj, parsePhones, phones, screenName, services, set, setm, setx, sites, _i, _j, _len, _ref;
  obj = {};
  set = function(name, value) {
    value = '"' + (value || '') + '"';
    if (name in obj) {
      return obj[name].push(value || '');
    } else {
      return obj[name] = [value];
    }
  };
  setx = function(name, type, value) {
    set("" + name + " - Type", type);
    return set("" + name + " - Value", value);
  };
  setm = function(name, service, value) {
    set("" + name + " - Type", "New");
    set("" + name + " - Service", service);
    return set("" + name + " - Value", value);
  };
  parsePhones = function(str) {
    var number, _i, _len, _ref, _results;
    _ref = (str || '').split('\n');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      number = _ref[_i];
      _results.push(number.split('\t')[0]);
    }
    return _results;
  };
  screenName = function(str) {
    var account, all, id, services, type, _i, _len, _ref, _ref1;
    services = {};
    _ref = (str || '').split('\n');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      account = _ref[_i];
      _ref1 = account.match(/(.*)\((.*)\)/) || [], all = _ref1[0], id = _ref1[1], type = _ref1[2];
      services[type] = id;
    }
    return services;
  };
  for (_i = 0, _len = finished.length; _i < _len; _i++) {
    info = finished[_i].info;
    set("Name", info.name);
    set("Given Name", info.first_name);
    set("Family Name", info.last_name);
    set("Gender", info.gender);
    setx("E-mail 1", "Facebook", info.Email || ("" + info.username + "@facebook.com"));
    phones = parsePhones(info['Mobile Phones']).concat(parsePhones(info['Other Phones']));
    setx('Phone 1', "Mobile", phones[0]);
    setx('Phone 2', 'Home', phones[1]);
    setx('Phone 3', 'Other', phones[2]);
    services = screenName(info['Screen Names']);
    setm('IM 1', 'Google Talk', services['Google Talk']);
    setm('IM 2', 'MSN', services['Windows Live Messenger']);
    setm('IM 3', 'Skype', services['Skype']);
    setm('IM 4', 'AIM', services['AIM']);
    setm('IM 5', 'Yahoo', services['Yahoo! Messenger']);
    sites = (info['Website'] || '').split('\n');
    setx('Website 1', 'Facebook', info.link);
    setx('Website 2', '', sites[0]);
    setx('Website 3', '', sites[1]);
    setx('Website 4', '', sites[2]);
    set('Birthday', info.birthday);
    set('Home Address', info['Address']);
    set("Notes", (info.bio || '').replace(/"/g, ''));
  }
  keys = Object.keys(obj);
  csv = [keys.join(',')];
  for (i = _j = 0, _ref = finished.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
    csv.push(((function() {
      var _k, _len1, _results;
      _results = [];
      for (_k = 0, _len1 = keys.length; _k < _len1; _k++) {
        key = keys[_k];
        _results.push(obj[key][i]);
      }
      return _results;
    })()).join(','));
  }
  return csv.join('\n');
};
